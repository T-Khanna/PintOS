            +--------------------------+
            |          OS 211          |
            |  TASK 3: VIRTUAL MEMORY  |
            |      DESIGN DOCUMENT     |
            +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Alessandro Bonardi ab9515@ic.ac.uk
Andy Hume ah2814@ic.ac.uk
Tanmay Khanna tk915@ic.ac.uk
Thomas Bower tb1215@ic.ac.uk

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, or notes for the
>> markers, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

            PAGE TABLE MANAGEMENT
            =====================

---- DATA STRUCTURES ----

>> A1: (5 marks)
>> Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration that relates to your supplemental page table.
>> Identify the purpose of each in 25 words or less.

In thread.h, added member to struct thread:

  struct hash supp_page_table;
  /* The supplementary page table for this thread, entries take form of
     struct supp_page */

In page.h, created struct supp_page to represent each entry of the supplementary
page table:

  struct supp_page {
    void *vaddr;                /* The virtual address of this page */
    enum page_status_t status;  /* The status of this page */
    struct hash_elem hash_elem; /* Bookkeeping */
  };

In page.h, created enum page_status_t to represent to status of each page in the
supplementary page table:

  /* The status of a page */
  enum page_status_t {
    LOADED,     /* Loaded in memory */
    MMAPPED,    /* Memory mapped and stored in the mmap table */
    SWAPPED,    /* Swapped out to disk */
    ZEROED,     /* Zeroed out page */
  };

---- ALGORITHMS ----

>> A2: (5 marks)
>> Describe your code for locating the frame, if any, that contains
>> the data of a given page.

The page directory keeps track of the mapping from pages to frames for pages
that are loaded in memory, and the CPU translates these on-the-fly. For pages
that are not loaded into memory, a page fault is produced when user programs
access these pages.

When a user process page faults, we first get a zeroed out frame from our frame
allocator.

We then retrieve the status of the page from the supplementary page table, by
rounding down the page fault address and looking up the entry in the current
thread's supplementary page table. If we do not find an entry for the page fault
address, we check if the fault address is a valid stack access. If it is, we get
a frame of memory from our frame allocator, update the page directory and
supplementary page table, and return. If it was not a valid stack access, then
the usr process is buggy, and we kill it.

If there was an entry in the spt, then we get a frame of memory from our frame
allocator, and load in the correct data for that page, as outlined below.

There are four possible statuses of a page:

* SWAPPED
  the page has been evicted from memory, and lives on disk. We must now load it
  back into memory. We do this by consulting the thread's swap table to find the
  index of the swap slot that this page lives in, and loading this in from the
  swap block device.
  We then mark this page as LOADED in the supplementary page table

* ZEROED
  the page should be a newly allocated zeroed out page. We already have this, so
  we simply mark the page as loaded in the supplmentary page table.

* MMAPPED
  the page should be loaded from a file. we look up the entry in the file page
  table, which gives us the file that this page is from, the offset of the start
  of the page into the file, and the size of the page (how many bytes belong to
  this page, starting from the offset). We seek the file to the offset and read
  size bytes into the frame we got from the allocator.

* LOADED
  we should never page fault on these types of pages, so we panic the kernel.

>> A3: (5 marks)
>> How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame?
>> Your answer should include a discussion of how you have implemented
>> sharing of read only pages.

We have not implemented sharing of pages between processes. As such, the only
page directory entries that we care about the accessed and dirty bits for are
memory mapped files (to determine whether we need to write a page back to the
file when it gets evicted). In system calls, we always access user memory using
the user virtual addresses, rather then the kernel addresses, and as such the
accessed and dirty bits for the in the page directory of the process that owns
a page are canonical, and these are the bits we look at when we evict a memory
mapped page from memory.

---- SYNCHRONIZATION ----

>> A4: (5 marks)
>> When two user processes both need a new frame at the same time,
>> how are races avoided? You should consider both when there are
>> and are not free frames available in memory.

We have a lock in our frame table that ensures mutual exclusion for critical
operations on the frame table, including getting a new frame of memory.

In our frame allocator, we request a user pool page from palloc, and then
get the frame table lock.

If there was free memory, we just make an entry for the frame table and insert
it to the frame table (which must be synchronized).

If there was not free memory, we evict a frame from memory. This may involve
writing a frame to swap or a file, and then removing the entry from the frame
table, so mutual exclusion for this operation ensures that we do not have any
races in any of these operations. Frame eviction then calls palloc_free_page().
After evicting a frame, we request a page from palloc again, which will now
succeed.

---- RATIONALE ----

>> A5: (5 marks)
>> Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

We continue to let the page directory contain the mapping from virtual to
phyiscal addresses, because we must maintain this table for user programs to
access memory. We introduced the supplementary page table, based around a hash
table, to manage extra information about where pages are located.

Hash tables allow for constant time lookup, which is good because the
supplementary page table will have one entry per page reserved for the process
to use.

The supplementary page table also only has an entry for the pages that are
mapped by a process. This is important because the entire virtual address space
is very large, and an SPT is created for each user process that is running.

We also split information about file mappings and swapped pages into separate
tables so that we can keep the entry size of each small, because these tables
will all have a large number of entries. The supplementary page table simply
has information about where to look to find the data that belongs in a page.

               PAGING TO AND FROM DISK
               =======================

---- DATA STRUCTURES ----

>> B1: (5 marks)
>> Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration that relates to your frame table and swap table.
>> Identify the purpose of each in 25 words or less.

In thread.h, we have added the hash tables corresponding to a thread's
supplementary page table, swap table, and memory mapped files:

  struct thread {
      struct hash mappings;               /* Mapping link between mapid and user
                                             virtual addresses */
      struct hash mmap_file_page_table;   /* Memory mapped files */
      struct hash swap_table;             /* Thread's swap table */
      void **esp;                         /* Thread's saved stack pointer for
                                             use during system calls */
  };

In frame.h, added struct frame to represent individual frames in the frame
table:

  struct frame {
    struct thread *t;           /* Reference to the process the frame entry
                                   belongs to */
    void *uaddr;                /* The address in user memory. */
    void *kaddr;                /* Reference to page address in kernel vm.
                                   Also the key used for the hash table. */
    struct hash_elem hash_elem; /* Hash table element for placement in to
                                   a hash table. */
  };

In swap.h, added the following type definition:

  typedef size_t swap_index_t;  /* The datatype used to index swap slots on
                                   disk. */

In swap.h, added struct swap_table_entry to represent an individual entry
within the swap table:

  struct swap_table_entry {
    void *vaddr;            /* Pointer to the start of the page that
                               this swap block holds */
    swap_index_t index;     /* The index of the swap block */
    struct hash_elem elem;  /* Hash table element for placement in to a
                               hash table. */
  };

---- ALGORITHMS ----

>> B2: (5 marks)
>> When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

In frame.c, we have a choose_victim function which is what we use for choosing
which frame to evict - currently this is done by using a random strategy.

We do this by choosing the first elemnt of the hash table, which is sorted by
the hash of the kernel virtual address of the frame. This has the same
probability of choosing any user page from any process.

Choosing a random frame to evict usually fares better than FIFO, and was used
by the Intel i860 processor. This frame eviction algorithm allows us to choose
a frame to evict very quickly, and vastly simplifies the implementation.

>> B3: (5 marks)
>> When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

Process P obtains a frame by calling frame_get_page. If there is no free frames
available, it will evict a frame from memory by calling frame_evict on whatever
frame it has chosen as the victim, in this case Q's frame.

In frame_evict(), we look up the status of the page in Q's supplementary page
table. We then take the necessary action to store this page to the appropriate
backing store, either swap if it's a normal (stack) frame, or a file if the
frame was memory mapped and the page is marked as dirty in the page directory.
Swapping the frame creates an entry in Q's swap table.

After we have stored the page, we call frame_free_page, which removes the
entry of the frame from the frame table, removes it from the victim's page
directory, and calls palloc_free_page, in that order.

It is important that we remove the pagedir entry before calling palloc_get_page,
because removing the pagedir entry means that the victim process Q cannot access
the page, so at the time that it is given to process P, it is inaccessible to Q.

>> B4: (5 marks)
>> Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

We have chosen 8MB as the maximum stack size for user processes.

We consider a valid stack address if it points to a location between PHYS_BASE
and PHYS_BASE - STACK_MAX_SIZE (the maximum stack size), and it is either above
the stack pointer, or 4 or 32 bytes below it, because of the PUSH and PUSHA
instructions.

Since the page fault could be caused by a system call, the syscall
handler saves the stack pointer inside the thread structure. If eip points to
an address above PHYS_BASE, and it is therefore a page fault cause by a system
call, we access the stack pointer saved in the thread structure, otherwise we
access the interrupt frame passed to the page fault handler.

---- SYNCHRONIZATION ----

>> B5: (5 marks)
>> Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to a
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

We put in place locks for the frame table and swap system, as well still having
the filesystem lock from task 2.

A process obtains the frame table lock when it is getting a frame (which may
involve evicing another frame), or when it is freeing a page.

>> B6: (5 marks)
>> A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?



>> B7: (5 marks)
>> Explain how you handle access to paged-out pages that occur
>> during system calls. How do you gracefully handle attempted
>> accesses to invalid virtual addresses?



---- RATIONALE ----

>> B8: (5 marks)
>> A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.



             MEMORY MAPPED FILES
             ===================

---- DATA STRUCTURES ----

>> C1: (5 marks)
>> Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration that relates to your file mapping table.
>> Identify the purpose of each in 25 words or less.

We have updated the function pointer array from Task 2 to include the mmap
and munmap system calls:

  static void (*system_calls[]) (struct intr_frame *) = {
    &sys_halt, &sys_exit, &sys_exec, &sys_wait, &sys_create, &sys_remove,
    &sys_open, &sys_filesize, &sys_read, &sys_write, &sys_seek, &sys_tell,
    &sys_close, &sys_mmap, &sys_munmap
  };

We have added the mapid_t type definition to identify each of the memory
mapped files stored in our memory map file table:

  typedef int mapid_t;          /* Used to track memory mapped files */

To set this mapid for each new memory mapped file, we have added a new member
in struct process:

  mapid_t next_mapid;           /* Used to allocate the id for the next
                                   memory mapping. */

We have added a data structure to store each user page created for the memory
mapped file. This is used as the entry for our mmap_file_page_table:

  struct mmap_file_page {
    mapid_t mapid;              /* The mapping this file page belongs to */
    void* uaddr;                /* Reference to the page for this entry */
    struct file* file;          /* Reference to the file for the page */
    off_t ofs;                  /* The offset of the start of the page into the
                                   file */
    uint32_t size;              /* The number of bytes into the page that belong
                                   to the file. */
    bool writable;              /* Check if page is writable or not */
    struct hash_elem hash_elem; /* Used to hash the struct mmap_file_page */
  };

The data structure below is used to find the range of user addresses the mapid
refers to. This is neccessary as our memory mapped file table is hashed by the
user address:

  struct mapid_to_addr {
    mapid_t mapid;              /* Id of the mapping referred to */
    void* start_addr;           /* Starting user address from the mapping */
    void* end_addr;             /* Ending user address from the mapping */
    struct hash_elem hash_elem; /* Used by the struct hash mapping */
  };

We have added the hash structures for the memory map file page table, which is
hashed by user address, and the mappings from mapid to the user addresses, which
is needed to obtain the file pages for the mapid provided:

  struct hash mmap_file_page_table;   /* Memory mapped files */
  struct hash mapid_page_table;       /* Mapping link between mapid and user
                                         virtual addresses */

---- ALGORITHMS ----

>> C2: (5 marks)
>> Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

Memory mapped files store the pages through the mmap system call, where we
allocate a new mapid for the memory mapped file. We set the status of the
supplementary entry to  After this, we store the supp_page and mmap_file_page
into the supp_page_table and mmap_file_page_table . We also store the mapid,
the user address passed into the mmap system call and the last user address we
stored into the mapid_page_table. This is needed to obtain the user address
when we call the munmap system call.

No pages are loaded during the mmap system call, we lazy load the pages through
the page fault handler. When we get a page fault for the memory mapped file, we
enter the MMAPPED case when checking the supplementary page entry, at which
point we lazy load the file present in the mmap_file_page structure for that
user address. This is different from the other valid page statuses, which are
ZEROED and SWAPPED. If the page is a swapped page, we simply swap the page back
into memory. If the page is zeroed, we don't have anything to do as the frame
allocator creates a zeroed page by default.

During the eviction process, if we have to evict a memory mapped file, we check
the dirty bits of the page, to see if the page has been written to. If this is
the case, we write the changes back to the file before continuing with the
eviction process. This is different from the other possible valid page, which
is when the status is LOADED. In this case, the page is loaded into memory and
we swap the frame to the swap disk section.

>> C3: (5 marks)
>> Explain how you determine whether a new file mapping overlaps
>> any existing segment.

To check if a new file mapping overlaps any existing segment, we call the
check_any_mapped function, which takes in the starting user address and the
ending user address. We iterate over all the pages in this range and check if
we have a supplementary page table entry for any of the pages. If this is the
case, that means that we are overlapping with another user page that has yet to
be lazy loaded. We return true in this case, to signal that we are overlapping
an existing segment. If we don't have a supplementary page table entry for any
of the pages, we return false to signal that there is no overlap and that the
start user address is valid for this mmap system call.

---- RATIONALE ----

>> C4: (5 marks)
>> Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

When we store pages for the executables through load_segment, we call the
mmap_file_page_table_insert function and pass in all the relevant file
information and user address to the mmap_file_page_table. We also set the
supplementary page table entry to MMAPPED before storing it in the
supp_page_table. We do not set the mapid value however, as this is not a memory
mapped file.

We treat the executable exactly the same way we treat a memory mapped
file when we lazy load the pages. When we page fault, we enter the MMAPPED case
when we check the supplementary page entry. At this point, we obtain the
mmap_file_page and read the file at the offset stored into the user page. This
avoids potentially duplicating the code for memory mapped files and executables
and avoids duplicating the components of the mmap_file_page_table data
structure.

As such, we do not share the code when we store the file, as the information we
need differs. We do share the code when we lazy load the page, as the behaviour
is identical there.
