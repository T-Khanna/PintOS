             +-------------------------+
             |         OS 211          |
             |  TASK 2: USER PROGRAMS  |
             |     DESIGN DOCUMENT     |
             +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Alessandro Bonardi ab9515@ic.ac.uk
Andy Hume ah2814@ic.ac.uk
Tanmay Khanna tk915@ic.ac.uk
Thomas Bower tb1215@ic.ac.uk

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, or notes for the
>> markers, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

               ARGUMENT PASSING
               ================

---- DATA STRUCTURES ----

>> A1: (2 marks)
>> Copy here the declaration of each new or changed `struct' or `struct' member,
>> global or static variable, `typedef', or enumeration. Identify the purpose of
>> each in 25 words or less.

None for argument passing.

---- ALGORITHMS ----

>> A2: (8 marks)
>> Briefly describe how you implemented argument parsing. In particular you
>> should mention how you arrange for the elements of argv[] to be in the right
>> order and how you avoid overflowing the stack page?

To prevent overflowing the stack page, we place limits on commands that may be
executed. Specifically, the length of the command string is limited to 3kB, and
the number of arguments is limited to 200. This ensures that the amount of space
we need on the stack is limited to
  3kB (command string) + 200*4B (argv) + 12B (argv, argc and return address)
  = 3884B
which, together with the struct thread (160B), adds up to 4004B, which is less
than 4kB, so these limits ensure we never overflow the stack.

Inside process_execute, we check whether the command is longer than 3kB, and
exit immediately if it is. Otherwise, we make a copy of the entire command
string to pass to the child, and copy the file name to be executed into our
stack. We then create the child thread, which is set to run start_process().

The child process counts the number of arguments, and exits immediately if this
is greater than 200.
Otherwise, the child process calls read_args, which tokenizes the command using
strtok_r, places the pointers into the array argv, and gives us the file name.

The child then calls push_args, which iterates over the array argv in reverse
order, copies each one to the stack using strcpy_stack, and puts the pointer
to the argument in array argv. push_args then word aligns the stack pointer,
pushes a word pointer, pushes the pointers in argv onto the stack by iterating
over the array in reverse order, then pushes the pointers to argv and argc, and
the fake return address.

---- RATIONALE ----

>> A3: (5 marks)
>> Why does Pintos implement strtok_r() but not strtok()?

strtok keeps the save_ptr as static variable, therefore it is not safe for
a thread to call strtok until the other thread is finished (it is not
re-rentrant).

strtok_r takes the save_ptr as an argument, so multiple threads can call it in
any order, and there are no concerns about receiving an invalid pointer or
race conditions, so it is re-rentrant.

This re-entrant property is important to us because a thread may be pre-empted
in the middle of parsing it's arguments (making calls to strtok_r), and another
thread may then start parsing it's arguments.

>> A4: (10 marks)
>> In Pintos, the kernel separates commands into a executable name and
>> arguments. In Unix-like systems, the shell does this separation. Identify
>> at least two advantages of the Unix approach.

Having the shell separate arguments, rather than just passing a command string
to the kernel, allows for more powerful shells that can have features such as
relative paths, shell variables, multiple directories containing executables
that can be run by just their name (tracked by the $PATH variable), and aliases.
This is possible because when the shell is responsible for parsing commands,
it can modify the arguments to expand variables, relative paths, command
names (to the actual file where the executable lives), and aliases.

Having the shell parse commands also allows users to choose a shell based upon
what features it offers, what syntax style it follows (including more obscure
styles such as the fish shell), and how fast it is. Users can even use different
shells for tasks, such as using a very simple shell like sh for scripts that
prefer speed over advanced features, while using a slower shell with more
advanced features such as bash, fish or zsh for interactive usage.

The shell's argument parsing can also be changed without requiring an OS update,
which may also require an OS restart to take effect, which is undesirable in
certain environments such as servers where availability is critical.

Separating this functionality also more closely follows the Unix philosophy of
each program doing one thing well, as it separates the concerns of command
parsing into a separate program (the shell), and reduces the complexity
of the kernel.

                 SYSTEM CALLS
                 ============

---- DATA STRUCTURES ----

>> B1: (10 marks)
>> Copy here the declaration of each new or changed `struct' or `struct' member,
>> global or static variable, `typedef', or enumeration. Identify the purpose of
>> each in 25 words or less.

In userprog/process.h, added new structure 'struct process'. This structure is
used to keep track of process information used by the system calls, even if the
thread dies.

struct process
  {
    tid_t tid;                        - Thread identifier that this process
                                        is associated with.
    int return_status;                - Return status of the process. Used
                                        for exit system call.
    int next_fd;                      - Counter used to allocate the id for the
                                        next file descriptor.
    bool load_success;                - Checks if loading an executable was a
                                        success. Used in the exec system call.
    bool thread_dead;                 - True when the thread is dead. Used to
                                        check if we need to free the process.
    bool parent_dead;                 - The parent process usually frees the
                                        child, but if the child is orphaned,
                                        this is needed to free the child when
                                        it exits.
    struct file* executable;          - Used to keep track of executable file
                                        successfully loaded and also to deny
                                        file writes to the running executable.
    struct semaphore wait_sema;       - Sempahore used to wait for a child
                                        process in process_wait().
    struct semaphore exec_sema;       - Semaphore used to wait for a child
                                        process to try to load its executable.
    struct list_elem child_elem;      - Used by the thread to keep track
                                        of its child processes.
  };

In filesys/descriptor.h, added new structure 'struct descriptor', which is used
to keep track of the files opened by the process and their ids.

struct descriptor
  {
    int id;                           - The id relating to the descriptor.
    struct file *file;                - The file associated with the id. Used
                                        with the id to create a mapping to
                                        this file.
    struct list_elem elem;            - Used by the thread to keep track of the
                                        file descriptors used by the process.
  };

In threads/thread.h, added the following members to 'struct thread'

  struct list descriptors;            - List of all file descriptors. Used to
                                        keep track of the files opened by this
                                        process and their ids.
  struct process *process;            - Process this thread executes. Keeps
                                        track of process information used by the
                                        system calls even if this thread dies.
  struct list child_processes;        - List of child processes created by the
                                        thread. Used with get_process_by_tid()
                                        to find the child this thread must
                                        wait for.

In syscall.c, added the following static variables

  static struct lock filesys_lock;

  static void (*system_calls[]) (struct intr_frame *);

The filesys_lock is used to ensure that only one process can access the file
system at any time. The system_calls array is a function pointer table mapping
the system call number given in the interrupt frame to the correct system call.

>> B2: (5 marks)
>> Describe how you associate file descriptors with open files. Are your file
>> descriptors unique within the entire OS or just within a single process?

We use the 'struct process' member next_fd, which simply increments whenever we
open a new file. After retrieving this newly generated value, we also add a
pointer to the new file into the descriptor structure, effectively creating a
mapping between the id and the file.

Each thread has a list of 'struct descriptor' members. We use the mapping
described above to access the correct file in this list.

As we access the next_fd counter from within the process structure, our file
descriptors are unique within a single process. It is possible (and in fact
likely) that different processes will have identical file descriptors which
point to different files compared to another process.

---- ALGORITHMS ----

>> B3: (5 marks)
>> Describe how your code ensures safe memory access of user provided data from
>> within the kernel.

>> B4: (5 marks)
>> Suppose a system call passes the kernel a pointer to a full page
>> (4,096 bytes) of data that has to be copied from user space. What is the
>> least and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result? What about for a system
>> call that passes a pointer to only 2 bytes of data? How might you improve
>> these numbers?

Our system of checking user memory is to check pointers for safety before we
access them, rather than using the pagefault handler. However, we use use the
fact that memory is allocated to user processes in pages (aligned to the page
size) to check the initial pointer, and then the start of every page until the
end of the block of memory to check.

So, if we wish to copy a full page (e.g. in the write system call), the least
number of inspections of the page table is just 1 if the page is aligned.
However, if this block of memory lies across a page boundary, we make 2
inspections of the page table.

Similarly, if we wish to copy 2 bytes, the least number of inspections of the
page table is 1, however if we are very unlucky and the second byte is on the
next page after the first byte, we will have to inspect the page table twice.

We could improve these numbers by checking user memory using the pagefault
handler method, because then we would make 0 inspections to the page table.

>> B5: (8 marks)
>> Describe your implementation of the "wait" system call and how it interacts
>> with process termination for both the parent and child.

When the "wait" system call is called, we call process_wait. In process_wait,
we get the child process by searching the list of child processes of the current
thread. If we don't find the child process, either the process corresponding to
the tid is not a direct child, it has been terminated by the kernel, the
child_tid is invalid, or the parent has already waited on the child and it's
process has been removed from the list of child processes. In all of these
cases, get_process_by_tid() will return NULL, and we immediately return -1 to
inidcate an error.

If we got the child process successfully (i.e. it's not NULL), then we are ok
to wait on it, so we down the semaphore wait_sema (initialized to 0), which
blocks us until the child process has finished executing. Either the child was
not finished executing when we downed the semaphore, in which case we waited
until the child upped the semaphore upon exiting, or it already finshed and
upped the semaphore before, in which case the semaphore's value is now 1 and we
downed it immediately.

If the child thread has terminated before we call process_wait(), the process
associated with the child thread remains on the list of child_processes of the
parent thread, so we are still able to retrieve the exit status of the child. We
free these dead child processes when the parent exits.

When a process exits, the exit status is set through the exit system
call. It then calls thread_exit(), which calls process_exit(). After freeing
all the resources no longer needed at this point, we up wait_sema of this
process. This unblocks the parent if it is waiting and allows us to return the
exit status of the child process. At this point, we also notify all children of
this process that they are ophaned i.e. their parent (the process exiting) is
dead, and if this processes is orphaned (it's parent is dead), it frees it's
own process struct.

>> B6: (5 marks)
>> Any access to user program memory at a user-specified address can fail due to
>> a bad pointer value. Such accesses must cause the process to be terminated.
>> System calls are fraught with such accesses, e.g. a "write" system call
>> requires reading the system call number from the user stack, then each of the
>> call's three arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point. This poses a design and error-handling problem:
>> how do you best avoid obscuring the primary function of code in a morass of
>> error-handling? Furthermore, when an error is detected, how do you ensure
>> that all temporarily allocated resources (locks, buffers, etc.) are freed?
>> In a paragraph, describe the strategy or strategies you adopted for managing
>> these issues.

---- SYNCHRONIZATION ----

>> B7: (5 marks)
>> The "exec" system call returns -1 if loading the new executable fails, so it
>> cannot return before the new executable has completed loading. How does your
>> code ensure this? How is the load success/failure status passed back to the
>> thread that calls "exec"?

We are using a semaphore to ensure synchronization between the parent and the
child process. After the child thread is created we perform a sema_down call on
the parent. This forces it to wait until the child calls sema_up when the
load() call has finished. We set the load_success variable in the child to true
if it successfully loaded or false if it did not. Because we set this variable
before waking up the parent, we can check the child's load_success variable as
the parent in process_execute(), at which point we can return -1 if load_success
is false or the tid if load_success is true. After this, we just set the return
value of the exec system call to the return value from process_execute().

>> B8: (5 marks)
>> Consider parent process P with child process C. How do you ensure proper
>> synchronization and avoid race conditions when P calls wait(C) before or
>> after C exits? How do you ensure that all resources are freed in each case?
>> How about when P terminates, without waiting, before or after C exits? Your
>> answer must cover all four cases mentioned above and address resource
>> freeing.

Case 1: Parent calls wait(C) before C exits
In this case, C forces P to wait for it by calling sema_down on its wait_sema.
Because this is initialised with a value of zero, P is blocked and added to the
waiters list of C. This semaphore is only upped when process_exit() is called
on C, by which point the return_status is set in C. All of C's resources are
freed by P when P exits, which is required in order to deal with Case 2.

Case 2: Parent calls wait(C) after C exits
In this case, P doesn't have to wait for C as it is already dead. Because C has
exited before wait(C) is called, when we call sema_up on the child's wait
semaphore in process_exit(), the value increases from the initial value of 0 to
1. This means that when we down the semaphore in process_wait(), we don't block
the thread. Instead we just return the return_status from the process. C's
resources are freed immediately after we retrieve the exit status.

Case 3: Parent terminates, without waiting, before C exits
If the parent terminates before C exits, we cannot rely on C being freed by P
anymore. As such, we use a parent_dead variable, which keeps track of when a
parent is dead. In this case, when C exits, the parent_dead variable is set to
true. When process_exit() for C is called, if parent_dead is true, we no longer
require the process structure, so we free it at this point.

Case 4: Parent terminates, without waiting, after C exits
C's resources are freed in the same manner as Case 1.

---- RATIONALE ----

>> B9: (5 marks)
>> Why did you choose to implement safe access of user memory from the kernel in
>> the way that you did?

>> B10: (5 marks)
>> What advantages or disadvantages can you see to your design for file
>> descriptors?

The main advantage is that we don't have to search through all the files in the
file system to find the file that is owned by the current thread, which could
become very expensive as more and more files get created in the file system.
Also, the list of file descriptors is not limited to a fixed size, so we are
not relying on limiting the number of files our filesystem can hold.

A disadvantage in this approach is that we may have to iterate through all the
files of a thread before we find the file we are looking for. This is not a big
issue, however, as this list only contains files owned by the current thread,
so it is typically small.

>> B11: (2 marks)
>> The default tid_t to pid_t mapping is the identity mapping. Did you change
>> this? Why?

We did not change the identity tid_t to pid_t mapping for simplicity and also
because there was no discernable advantage to creating a new mapping.
